///////////////////////////////////////////////////////////////////////////////
//Copyright (c) 2014 Ericsson
//
//The copyright in this work is vested in Ericsson Telekommunikation GmbH
//(hereafter "Ericsson"). The information contained in this work (either in whole
//or in part) is confidential and must not be modified, reproduced, disclosed or
//disseminated to others or used for purposes other than that for which it is
//supplied, without the prior written permission of Ericsson. If this work or any
//part hereof is furnished to a third party by virtue of a contract with that
//party, use of this work by such party shall be governed by the express
//contractual terms between Ericsson, which is party to that contract and the
//said party.
//
//The information in this document is subject to change without notice and
//should not be construed as a commitment by Ericsson. Ericsson assumes no
//responsibility for any errors that may appear in this document. With the
//appearance of a new version of this document all older versions become
//invalid.
//
//All rights reserved.
///////////////////////////////////////////////////////////////////////////////
/*
 * static char *SCCS_VERSION = "%I%";
 */

#include <string.h>
#include <iostream>

#include "DbCtrl.hpp"

/*
 * SQL stuff
 */

EXEC SQL INCLUDE SQLCA;
EXEC SQL INCLUDE ORACA;
EXEC ORACLE OPTION( ORACA=YES );
EXEC ORACLE OPTION( RELEASE_CURSOR=NO );
EXEC ORACLE OPTION( SELECT_ERROR=YES );
EXEC ORACLE OPTION( SQLCHECK=SYNTAX );

DbCtrl::~DbCtrl()
{}

void
DbCtrl::disconnect ( void )
{
    bool ok      = true;

    EXEC SQL WHENEVER SQLERROR DO sqlErrorHandler( "DbCtrl::disconnect" );
    EXEC SQL CONTEXT USE DEFAULT;
    EXEC SQL COMMIT WORK RELEASE;
}

bool
DbCtrl::connect ( const char * cfpUsername,    /* Login name for DB-server.       */
                  const char * cfpPassword,    /* Password to access the DB.      */
                  const char * cfpDbName )     /* Name of database to connect to. */
{
    EXEC SQL BEGIN DECLARE SECTION;
    const char * lpDbName;
    const char * lpUsername;
    const char * lpPassword;
    EXEC SQL END DECLARE SECTION;
    
    bool ok      = true;
    lpDbName   = cfpDbName;
    lpUsername = cfpUsername;
    lpPassword = cfpPassword;
    
    EXEC SQL WHENEVER SQLERROR DO ok = sqlErrorHandler( "DbCtrl::initDbConnect" );
    EXEC SQL CONTEXT USE DEFAULT;

    EXEC SQL CONNECT  :lpUsername
        IDENTIFIED BY :lpPassword
        USING         :lpDbName;

    if ( true == ok )
    {
        EXEC SQL
            ALTER SESSION SET nls_numeric_characters = '. ';
    }

    if ( true == ok )
    {
        EXEC SQL
            ALTER SESSION SET nls_date_format = 'YYYYMMDDHH24MISS';
    }

    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL CONTEXT USE DEFAULT;    
    
    return ok;
}

bool
DbCtrl::sqlErrorHandler (const char * cfpFunctionName) 
{
    cerr << "SQL error in function '" << cfpFunctionName << "'" << endl
         << "SQL return code       : " << sqlca.sqlcode << endl
         << "SQL error message     : " << sqlca.sqlerrm.sqlerrmc << endl;
    
    EXEC SQL ROLLBACK;

    return false;
}

